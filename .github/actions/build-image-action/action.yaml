---
name: Build image and cache to
description: Build image using docker buildx for multi-arch support

inputs:
  source_image:
    description: Parent/Source full image name (registry/image)
    required: true
  image_name:
    description: Image name
    required: true
  python_version:
    description: python version
    required: true
  platforms:
    description: Image platform architectures
    required: true
  gh_registry:
    description: Github registry (ghcr.io/<owner>)
    required: true
  owner:
    description: Registry name
    required: true
outputs:
  python_tag:
    description: Python version tag (python-<major.minor>)
    value: ${{ steps.tags.outputs.python_tag }}
  short_nametag:
    description: Image name and short tag (image:python-<major.minor>)
    value: ${{ steps.tags.outputs.short_nametag }}
  long_nametag:
    description: Image name and long tag (image:python-<major.minor>-<sha>)
    value: ${{ steps.tags.outputs.long_nametag }}
  image_digest:
    description: Image digest
    value: ${{ steps.build.outputs.digest }}

runs:
  using: composite
  steps:

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    ### should completed outside of Action and apply inside
    ### since 'using: composite'
    # - name: Login to GitHub Container Registry
    #   uses: docker/login-action@v2
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.repository_owner }}
    #     password: ${{ secrets.GITHUB_TOKEN }}
    #
    ### should not need to log into dockerhub to build
    # - name: Login to DockerHub ✅
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_USER }}
    #     password: ${{ secrets.DOCKER_TOKEN }}

    - name: Get current date 🗓
      id: date
      shell: bash
      run: |
        DATE=$(date +'%Y%m%d')
        echo "DATE: ${DATE}"
        echo "date=${DATE}" >> $GITHUB_OUTPUT

    - name: Create tags 🏷
      id: tags
      shell: bash
      run: |
        GIT_SHA="${GITHUB_SHA:0:7}"
        PYTHON_TAG="python-${PYTHON_VERSION/'.*'/}"
        SHORT_NAMETAG="${IMAGE_NAME}:${PYTHON_TAG}"
        LONG_NAMETAG="${IMAGE_NAME}:${PYTHON_TAG}-${GIT_SHA}"
        # ------------------------------------------------------------------
        echo "GIT_SHA: ${GIT_SHA}"
        echo "PYTHON_TAG: ${PYTHON_TAG}"
        echo "SHORT_NAMETAG: ${SHORT_NAMETAG}"
        echo "LONG_NAMETAG: ${LONG_NAMETAG}"
        # ------------------------------------------------------------------
        echo "git_sha=${GIT_SHA}" >> $GITHUB_OUTPUT
        echo "python_tag=${PYTHON_TAG}" >> $GITHUB_OUTPUT
        echo "short_nametag=${SHORT_NAMETAG}" >> $GITHUB_OUTPUT
        echo "long_nametag=${LONG_NAMETAG}" >> $GITHUB_OUTPUT
      env:
        PYTHON_VERSION: ${{ inputs.python_version }}
        IMAGE_NAME: ${{ inputs.image_name }}

    ### https://github.com/docker/build-push-action
    ### https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md
    - name: Build image 🛠
      id: build
      uses: docker/build-push-action@v3
      with:
        builder: ${{ steps.buildx.outputs.name }}
        platforms: ${{ inputs.platforms }}
        context: src/${{ inputs.image_name }}
        # file: ./Dockerfile
        build-args: |
          SOURCE_IMAGE=${{ inputs.source_image }}
          PYTHON_VERSION=${{ inputs.python_version }}
          GIT_COMMIT=${{ steps.tags.outputs.git_sha }}
          BUILD_DATE=${{ steps.date.outputs.date }}
        # cache-from: type=gha
        cache-to: type=registry,ref=${{ inputs.gh_registry }}/${{ inputs.image_name }}:buildcache,mode=max
        push: true
        tags: |
          ${{ inputs.gh_registry }}/${{ steps.tags.outputs.short_nametag }}
          ${{ inputs.gh_registry }}/${{ steps.tags.outputs.long_nametag }}

    - name: Inspect image digest 🔬
      shell: bash
      run: echo ${{ steps.build.outputs.digest }}

    - name: Inspect new image 🔬
      shell: bash
      run: |
        docker pull ${{ inputs.gh_registry }}/${{ inputs.image_name }}@${{ steps.build.outputs.digest }}
