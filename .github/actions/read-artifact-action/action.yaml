---
name: read-artifact
description: reads variable from artifact

# inputs:
#   artifact_name:
#     description: Name of artifact to download
#     required: true
#     default: vars
outputs:
  python_version:
    description: Python version (<major.minor.*>)
    value: ${{ steps.vars.outputs.python_version }}
  python_tag:
    description: Python version tag (python-<major.minor>)
    value: ${{ steps.vars.outputs.python_tag }}
  git_tag:
    description: Git short sha
    value: ${{ steps.vars.outputs.git_tag }}
  # short_nametag:
  #   description: Image name and short tag (image:python-<major.minor>)
  #   value: ${{ steps.vars.outputs.short_nametag }}
  # long_nametag:
  #   description: Image name and long tag (image:python-<major.minor>-<sha>)
  #   value: ${{ steps.vars.outputs.long_nametag }}
  image_digest:
    description: Image digest
    value: ${{ steps.vars.outputs.image_digest }}

runs:
  using: composite
  steps:
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#using-data-from-the-triggering-workflow
    - name: Download artifact ⬇️
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "vars"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/vars.zip`, Buffer.from(download.data));

    - name: Unzip artifact
      shell: bash
      run: unzip vars.zip

    - name: Read vars 📖
      id: vars
      shell: bash
      run: |
        # assumes dictionary format key: value
        IFS=$'\n' read -r -d '' -a  VARS_DICT <<< "$(grep -v '^#' vars | tr -d ' ')"
        for item in "${VARS_DICT[@]}"; do
          echo "${item%%:*}=${item##*:}" >> $GITHUB_OUTPUT
        done

    # - name: Read vars 📖
    #   id: vars
    #   shell: bash
    #   run: |
    #     while read -r line; do
    #       case ${line} in

    #         python_version*)
    #           PYTHON_VERSION="${line/'python_version '/}"
    #           echo "PYTHON_VERSION: ${PYTHON_VERSION}"
    #           echo "python_version=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
    #           ;;

    #         python_tag*)
    #           PYTHON_TAG="${line/'python_tag '/}"
    #           echo "PYTHON_TAG: ${PYTHON_TAG}"
    #           echo "python_tag=${PYTHON_TAG}" >> $GITHUB_OUTPUT
    #           ;;

    #         short_nametag*)
    #           SHORT_NAMETAG="${line/'short_nametag '/}"
    #           echo "SHORT_NAMETAG: ${SHORT_NAMETAG}"
    #           echo "short_nametag=${SHORT_NAMETAG}" >> $GITHUB_OUTPUT
    #           ;;

    #         long_nametag*)
    #           LONG_NAMETAG="${line/'long_nametag '/}"
    #           echo "LONG_NAMETAG: ${LONG_NAMETAG}"
    #           echo "long_nametag=${LONG_NAMETAG}" >> $GITHUB_OUTPUT
    #           ;;

    #         image_digest*)
    #           IMAGE_DIGEST="${line/'image_digest '/}"
    #           echo "IMAGE_DIGEST: ${IMAGE_DIGEST}"
    #           echo "image_digest=${IMAGE_DIGEST}" >> $GITHUB_OUTPUT
    #           ;;

    #         *)
    #           exit 1
    #           ;;

    #       esac
    #     done < vars
