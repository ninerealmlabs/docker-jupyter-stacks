name: base_env-CI

on:
  push:
    branches:
      - main
      - "develop/**"
    paths-ignore:
      #       - ".github/**"
      - "docs/**"
      - "scripts/**"
      - "*.md"
      - "**/.gitignore"
      - "LICENSE"

env:
  PLATFORMS: linux/amd64,linux/arm64
  GH_REGISTRY: ghcr.io/ninerealmlabs
  D_REGISTRY: docker.io/ninerealmlabs
  BASE_IMAGE: jupyter/minimal-notebook:latest
  IMAGE_NAME: base_env # IMAGE_NAME must be equivalent to subdirectory
  ### ALSO UPDATE NEXT_IMAGE IN JOBS.DISPATCH JOB

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        PYTHON: [3.7.*, 3.8.*, 3.9.*]

    steps:
      - uses: actions/checkout@v2
        with:
          # ref: ${{ github.event.workflow_run.sha }}
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current date
        id: date
        run: |
          DATE=$(date +'%Y%m%d')
          echo "DATE: ${DATE}"
          echo "::set-output name=DATE::${DATE}"

      - name: Create tags
        id: tag
        env:
          PYTHON_VERSION: ${{ matrix.PYTHON }}
        run: |
          TAG_VERSION=$(echo ${PYTHON_VERSION} | sed s'|[.*]||g')
          BRANCH=$(echo ${GITHUB_REF} | sed s'|refs/heads/||' | sed s'|/|.|')
          SHA=${GITHUB_SHA:0:7}
          FULLTAG="python-${TAG_VERSION}-${BRANCH}-${SHA}"
          PRODTAG="python-${TAG_VERSION}-${SHA}"
          #---
          echo "TAG_VERSION: ${TAG_VERSION}"
          echo "BRANCH: ${BRANCH}"
          echo "SHA: ${SHA}"
          echo "FULLTAG: ${FULLTAG}"
          echo "PRODTAG: ${PRODTAG}"
          #---
          echo "::set-output name=PYTHONTAG::${TAG_VERSION}"
          echo "::set-output name=BRANCH::${BRANCH}"
          echo "::set-output name=SHA::${SHA}"
          echo "::set-output name=FULLTAG::${FULLTAG}"
          echo "::set-output name=PRODTAG::${PRODTAG}"

      ######### TEST #########
      ### WAITING FOR akhilerm/tag-push-action TO UPDATE
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      ######### TEST #########

      ### https://github.com/docker/build-push-action
      ### https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md
      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          platforms: ${{ env.PLATFORMS }}
          context: src/${{ env.IMAGE_NAME }}/
          # file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ env.BASE_IMAGE }}
            PYTHON_VERSION=${{ matrix.PYTHON }}
            BUILD_DATE=${{ steps.date.outputs.DATE }}
          # cache-from: type=gha
          cache-to: type=registry,ref=${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          push: true
          tags: |
            ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.PYTHONTAG }}
            ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.FULLTAG }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Inspect new image
        run: |
          docker pull ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.FULLTAG }}
          docker inspect ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.FULLTAG }}

    outputs:
      IMAGE_NAME: ${{ env.IMAGE_NAME }}
      PYTHONTAG: ${{ steps.tag.outputs.PYTHONTAG }}
      BRANCH: ${{ steps.tag.outputs.BRANCH }}
      SHA: ${{ steps.tag.outputs.SHA }}
      FULLTAG: ${{ steps.tag.outputs.FULLTAG }}
      PRODTAG: ${{ steps.tag.outputs.PRODTAG }}

  ### Start next workflow
  dispatch:
    runs-on: "ubuntu-latest"
    needs: build
    strategy:
      matrix:
        NEXT_IMAGE: ["ds_env"]

    steps:
      - name: Call next build
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: ${{ matrix.NEXT_IMAGE}}-CI
          token: ${{ secrets.WORKFLOW_DISPATCH }}
          inputs: '{"REF": "${{ github.ref }}", "SHA": "${{ github.sha }}"}'

  ### Push to DockerHub if main branch / "release"
  dockerhub:
    runs-on: ubuntu-latest
    needs: build

    # push to registry on main branch only
    if: needs.build.outputs.BRANCH == 'main'
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # copy image from ghcr to dockerhub
      - name: Push image to alternate registries
        uses: akhilerm/tag-push-action@v1.1.0
        with:
          src: ${{ env.GH_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ needs.build.outputs.FULLTAG }}
          dst: |
            ${{ env.D_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ needs.build.outputs.PYTHONTAG }}

      - name: Push image to alternate registries
        uses: akhilerm/tag-push-action@v1.1.0
        with:
          src: ${{ env.GH_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ needs.build.outputs.FULLTAG }}
          dst: |
            ${{ env.D_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ needs.build.outputs.PRODTAG }}

      # - name: Push image to alternate registries
      #   # uses: akhilerm/tag-push-action@v1.1.0
      #   uses: akhilerm/tag-push-action@experiment
      #   with:
      #     src: ${{ env.GH_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ needs.build.outputs.FULLTAG }}
      #     dst: |
      #       ${{ env.D_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ needs.build.outputs.PYTHONTAG }}
      #       ${{ env.D_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ needs.build.outputs.PRODTAG }}
