name: base_env-CI

on:
  push:
    branches:
      - main
      - 'develop/**'
    paths-ignore:
  #       - ".github/**"
      - "scripts/**"
      - "*.md"
      - "**/.gitignore"
      - "LICENSE"

env:
  PLATFORMS: linux/amd64  #,linux/arm64
  GH_REGISTRY: ghcr.io/ninerealmlabs
  D_REGISTRY: ninerealmlabs
  BASE_IMAGE: jupyter/minimal-notebook:latest
  IMAGE_NAME: base_env  # IMAGE_NAME must be equivalent to subdirectory
  NEXT_ENV: ds_env

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        PYTHON: [3.7.*, 3.8.*, 3.9.*]

    steps:
      - uses: actions/checkout@v2
        with:
          # ref: ${{ github.event.workflow_run.sha }}
          fetch-depth: 0

      ### used for multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current date
        id: date
        run: |
          DATE=$(date +'%Y%m%d')
          echo "DATE: ${DATE}"
          echo "::set-output name=DATE::${DATE}"

      - name: Create tags
        id: tag
        env:
          PYTHON_VERSION: ${{ matrix.PYTHON }}
        run: |
          TAG_VERSION=${PYTHON_VERSION}
          if [[ ${TAG_VERSION: -1} == "*" ]]; then
              TAG_VERSION=${TAG_VERSION: 0:${#TAG_VERSION}-2}
          fi
          BRANCH=$(echo ${GITHUB_REF} | sed s'|refs/heads/||' | sed s'|/|.|')
          SHA=${GITHUB_SHA:0:7}
          FULLTAG="python-${TAG_VERSION}-${BRANCH}-${SHA}"
          PRODTAG="python-${TAG_VERSION}-${SHA}"
          #---
          echo "TAG_VERSION: ${TAG_VERSION}"
          echo "BRANCH: ${BRANCH}"
          echo "SHA: ${SHA}"
          echo "FULLTAG: ${FULLTAG}"
          echo "PRODTAG: ${PRODTAG}"
          #---
          echo "::set-output name=PYTHONTAG::${TAG_VERSION}"
          echo "::set-output name=BRANCH::${BRANCH}"
          echo "::set-output name=SHA::${SHA}"
          echo "::set-output name=FULLTAG::${FULLTAG}"
          echo "::set-output name=PRODTAG::${PRODTAG}"

### DISABLE BUILD FOR TESTING
      # ### https://github.com/docker/build-push-action
      # ### https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md
      # - name: Build image
      #   id: docker_build
      #   uses: docker/build-push-action@v2
      #   with:
      #     builder: ${{ steps.buildx.outputs.name }}
      #     # platforms: ${{ env.PLATFORMS }}
      #     context: src/${{ env.IMAGE_NAME }}/
      #     # file: ./Dockerfile
      #     build-args: |
      #       BASE_IMAGE=${{ env.BASE_IMAGE }}
      #       PYTHON_VERSION=${{ matrix.PYTHON }}
      #       BUILD_DATE=${{ steps.date.outputs.DATE }}
      #     no-cache: true
      #     ### Each job is isolated in its own runner, so can't share newly-built image directly between jobs
      #     ### Instead, push to **github** image repo
      #     push: true
      #     tags: |
      #       ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.PYTHONTAG }}
      #       ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.FULLTAG }}
      #
      # # ### https://github.com/marketplace/actions/docker-buildx-bake
      # # ### https://github.com/crazy-max/docker-buildx-bake-demo/
      # # - name: Build image
      # #   id: docker_bake
      # #   uses: docker/bake-action@v1.5
      # #   with:
      # #     builder: ${{ steps.buildx.outputs.name }}
      # #     files: src/${{ env.IMAGE_NAME }}/docker-compose.yml
      # #     no-cache: true
      # #     set: |
      # #       *.platform=${{ env.PLATFORMS }}
      # #       *.args.BASE_IMAGE=${{ env.BASE_IMAGE }}
      # #       *.args.PYTHON_VERSION=${{ matrix.PYTHON }}
      # #       *.args.BUILD_DATE=${{ steps.date.outputs.DATE }}
      # #       *.tags=${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.info.outputs.PYTHONTAG }}
      # #       *.tags=${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.info.outputs.FULLTAG }}
      # #     push: true
      #
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}
      #
      # - name: Inspect new image
      #   run: |
      #     docker pull ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.FULLTAG }}
      #     docker inspect ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.FULLTAG }}

###############################################################################
# ### Save run info as artifact & upload ###
#
# This is needed because while 'ds_env' can access 'base_env' workflow,
# 'forecast_env' is several workflows separate, but should still use
# the same reference information (branch/sha)
#
# See: https://stackoverflow.com/questions/67973057/github-actions-workflow-run-outputs
# See: https://github.com/dawidd6/action-download-artifact
###############################################################################
      # - name: Preserve run info
      #   run: |
      #     touch INFO
      #     echo "WORKFLOW:${GITHUB_WORKFLOW}" >> INFO
      #     echo "RUN_ID:${GITHUB_RUN_ID}" >> INFO
      #     echo "RUN_NUM:${GITHUB_RUN_NUMBER}" >> INFO
      #     echo "REF:${GITHUB_REF}" >> INFO
      #     echo "SHA:${GITHUB_SHA}" >> INFO

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ env.IMAGE_NAME }}-${{ github.run_id }}
      #     path: INFO
      #     retention-days: 1

      # - name: Call next build
      #   env:
      #     NEXT_ENV: ${{ env.NEXT_ENV }}
      #     REF: ${{ github.ref }}
      #     SHA: ${{ github.sha }}
      #   run: |
      #     curl \
      #       -X POST \
      #       -H "Accept: application/vnd.github.v3+.json" \
      #       https://api.github.com/repos/ninerealmlabs/docker-jupyter-stacks/actions/workflows/${NEXT_ENV}-ci.yml/dispatches \
      #       -d '{"ref":${REF} "sha":${SHA}}'

      - name: Call next build
        uses: benc-uk/workflow-dispatch@v1
        env:
          NEXT_ENV: ${{ env.NEXT_ENV }}
          # REF: ${{ github.ref }}
          # SHA: ${{ github.sha }}
        with:
          workflow: ${{ env.NEXT_ENV}}-CI
          # ref: ${{ github.ref }}
          # sha: ${{ github.sha }}
          token: ${{ secrets.WORKFLOW_DISPATCH }}
          inputs: '{"REF": "${{ github.ref }}", "SHA": "${{ github.sha }}"}'

    outputs:
      IMAGE_NAME: ${{ env.IMAGE_NAME }}
      PYTHONTAG: ${{ steps.tag.outputs.PYTHONTAG }}
      BRANCH: ${{ steps.tag.outputs.BRANCH }}
      SHA: ${{ steps.tag.outputs.SHA }}
      FULLTAG: ${{ steps.tag.outputs.FULLTAG }}
      PRODTAG: ${{ steps.tag.outputs.PRODTAG }}

# ###############################################################################
# # Push to DockerHub if main branch / "release"
# ###############################################################################
#   dockerhub:
#     runs-on: ubuntu-latest
#     needs: build

#     # push to registry on main branch only
#     if: needs.build.outputs.BRANCH == 'main'
#     steps:
#       - name: Login to DockerHub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKER_USER }}
#           password: ${{ secrets.DOCKER_TOKEN }}

#       # copy image from ghcr to dockerhub
#       - name: Push image to alternate registries
#         uses: akhilerm/tag-push-action@v1.1.0
#         with:
#           src: ${{ env.GH_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ needs.build.outputs.FULLTAG }}
#           dst: |
#             ${{ env.D_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ needs.build.outputs.PYTHONTAG }}
#             ${{ env.D_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ needs.build.outputs.PRODTAG }}