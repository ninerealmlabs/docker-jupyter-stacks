name: ds_env-CI

on:
  workflow_run:
    # trigger after base_env CI completes
    workflows: ["base_env-CI"]
    branches:
      - main
      - 'develop/**'
    types:
      - completed

env:
  PLATFORMS: linux/amd64  #,linux/arm64
  GH_REGISTRY: ghcr.io/ninerealmlabs
  D_REGISTRY: ninerealmlabs
  BASE_IMAGE: base_env
  IMAGE_NAME: ds_env  # IMAGE_NAME must be equivalent to subdirectory

jobs:
  ### NOTE: job name MUST be equivalent to image name and directory
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        PYTHON: [3.7.*, 3.8.*, 3.9.*]

    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Pause for artifact availability
        run: sleep 1m

      ### download artifact
      # - name: Download artifact
      #   uses: dawidd6/action-download-artifact@v2
      #   with:
      #     # Required, workflow file name or ID
      #     workflow: ${{ github.event.workflow_run.workflow_id }}
      #     # Optional, will use specified workflow run
      #     run_id: ${{ github.event.workflow_run.run_id }}
      #     # https://github.com/actions/download-artifact#download-all-artifacts
      #     # name: ${{ env.BASE_IMAGE }}-${{ github.event.workflow_run.run_id }}
      #     # path: ${{ env.BASE_IMAGE }}-${{ github.event.workflow_run.run_id }}

      - name: Download artifacts
        uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R
        # working-directory:
        # working-directory: ${{ env.BASE_IMAGE }}-${{ github.event.workflow_run.run_id }}

      - name: Parse artifact
        id: info
        run: |
          WORKFLOW=$(sed -n 's/^WORKFLOW://p' WFRUN_INFO)
          RUN_ID=$(sed -n 's/^RUN_ID://p' WFRUN_INFO)
          RUN_NUM=$(sed -n 's/^RUN_NUM://p' WFRUN_INFO)
          REF=$(sed -n 's/^REF://p' WFRUN_INFO)
          SHA=$(sed -n 's/^SHA://p' WFRUN_INFO)
          echo "WORKFLOW: ${WORKFLOW}"
          echo "RUN_ID: ${RUN_ID}"
          echo "WORKFLOW: ${WORKFLOW}"
          echo "RUN_NUM: ${RUN_NUM}"
          echo "REF: ${REF}"
          echo "SHA: ${SHA}"
          echo "::set-output name=WORKFLOW::${WORKFLOW}"
          echo "::set-output name=RUN_ID::${RUN_ID}"
          echo "::set-output name=RUN_NUM::${RUN_NUM}"
          echo "::set-output name=REF::${REF}"
          echo "::set-output name=SHA::${SHA}"

      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.info.outputs.sha }}
          fetch-depth: 0

      ### used for multi-arch builds
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current date
        id: date
        run: |
          DATE=$(date +'%Y%m%d')
          echo "DATE: ${DATE}"
          echo "::set-output name=DATE::${DATE}"

      - name: Create tags
        id: tag
        env:
          PYTHON_VERSION: ${{ matrix.PYTHON }}
          INFO_REF: ${{ steps.info.outputs.REF }}
          INFO_SHA: ${{ steps.info.outputs.SHA }}
        run: |
          TAG_VERSION=${PYTHON_VERSION}
          if [[ ${TAG_VERSION: -1} == "*" ]]; then
              TAG_VERSION=${TAG_VERSION: 0:${#TAG_VERSION}-2}
          fi
          BRANCH=$(echo ${INFO_REF} | sed s'|refs/heads/||' | sed s'|/|.|')
          SHA=${INFO_SHA:0:7}
          FULLTAG="python-${TAG_VERSION}-${BRANCH}-${SHA}"
          PRODTAG="python-${TAG_VERSION}-${SHA}"
          #---
          echo "TAG_VERSION: ${TAG_VERSION}"
          echo "BRANCH: ${BRANCH}"
          echo "SHA: ${SHA}"
          echo "FULLTAG: ${FULLTAG}"
          echo "PRODTAG: ${PRODTAG}"
          #---
          echo "::set-output name=PYTHONTAG::${TAG_VERSION}"
          echo "::set-output name=BRANCH::${BRANCH}"
          echo "::set-output name=SHA::${SHA}"
          echo "::set-output name=FULLTAG::${FULLTAG}"
          echo "::set-output name=PRODTAG::${PRODTAG}"

      ### https://github.com/docker/build-push-action
      ### https://github.com/docker/buildx/blob/master/docs/reference/buildx_build.md
      - name: Build image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          # platforms: ${{ env.PLATFORMS }}
          context: src/${{ env.IMAGE_NAME }}/
          # file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ env.GH_REGISTRY }}/${{ env.BASE_IMAGE }}:${{ steps.tag.outputs.FULLTAG }}
            PYTHON_VERSION=${{ matrix.PYTHON }}
            BUILD_DATE=${{ steps.date.outputs.DATE }}
          no-cache: true
          ### Each job is isolated in its own runner, so can't share newly-built image directly between jobs
          ### Instead, push to **github** image repo
          push: true
          tags: |
            ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.PYTHONTAG }}
            ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.FULLTAG }}

      # ### https://github.com/marketplace/actions/docker-buildx-bake
      # ### https://github.com/crazy-max/docker-buildx-bake-demo/
      # - name: Build image
      #   id: docker_bake
      #   uses: docker/bake-action@v1.5
      #   with:
      #     builder: ${{ steps.buildx.outputs.name }}
      #     files: src/${{ env.IMAGE_NAME }}/docker-compose.yml
      #     no-cache: true
      #     set: |
      #       *.platform=${{ env.PLATFORMS }}
      #       *.args.BASE_IMAGE=${{ env.GH_REGISTRY }}/${{ env.BASE_IMAGE }}:python-${{ steps.tag.outputs.tag }}-${{ steps.ref.outputs.ref }}-${{ steps.sha.outputs.sha }}
      #       *.args.PYTHON_VERSION=${{ matrix.PYTHON }}
      #       *.args.BUILD_DATE=${{ steps.date.outputs.DATE }}
      #       *.tags=${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.info.outputs.PYTHONTAG }}
      #       *.tags=${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.info.outputs.FULLTAG }}
      #     push: true

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Inspect new image
        run: |
          docker pull ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.FULLTAG }}
          docker inspect ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.FULLTAG }}

###############################################################################
# Save run info as artifact & upload
###############################################################################
      - name: Preserve run info
        env:
          WORKFLOW: ${{ steps.info.outputs.workflow }}
          RUN_ID: ${{ steps.info.outputs.run_id }}
          RUN_NUM: ${{ steps.info.outputs.run_num }}
          REF: ${{ steps.info.outputs.ref }}
          SHA: ${{ steps.info.outputs.sha }}
        run: |
          touch INFO
          echo "WORKFLOW:${GITHUB_WORKFLOW}" >> INFO
          echo "RUN_ID:${GITHUB_RUN_ID}" >> INFO
          echo "RUN_NUM:${GITHUB_RUN_NUMBER}" >> INFO
          echo "REF:${REF}" >> INFO
          echo "SHA:${SHA}" >> INFO

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.IMAGE_NAME }}-${{ github.run_id }}
          path: INFO
          retention-days: 1

    outputs:
      IMAGE_NAME: ${{ env.IMAGE_NAME }}
      PYTHONTAG: ${{ steps.tag.outputs.PYTHONTAG }}
      BRANCH: ${{ steps.tag.outputs.BRANCH }}
      SHA: ${{ steps.tag.outputs.SHA }}
      FULLTAG: ${{ steps.tag.outputs.FULLTAG }}
      PRODTAG: ${{ steps.tag.outputs.PRODTAG }}

###############################################################################
# Push to DockerHub if main branch / "release"
###############################################################################
  dockerhub:
    runs-on: ubuntu-latest
    needs: build

    # push to registry on main branch only
    if: needs.build.outputs.BRANCH == 'refs/heads/main'
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # copy image from ghcr to dockerhub
      - name: Push image to alternate registries
        uses: akhilerm/tag-push-action@v1.1.0
        with:
          src: ${{ env.GH_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ steps.tag.outputs.FULLTAG }}
          dst: |
            ${{ env.D_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ steps.tag.outputs.PYTHONTAG }}
            ${{ env.D_REGISTRY }}/${{ needs.build.outputs.IMAGE_NAME }}:${{ steps.tag.outputs.PRODTAG }}